{
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module",
    "project": ["./tsconfig.json", "./packages/*/tsconfig.json"]
  },
  "plugins": ["@typescript-eslint", "react", "eslint-comments"],
  "rules": {
    // typescriptを使うのでprop-typesによるバリデーションは不要
    "react/prop-types": "off",

    // 基本的にconsole.logは使わない。cliで使いたい場合はそれぞれの設定で上書きする。
    "no-console": "error",

    // 返り値はできる限り型を明示したい
    "@typescript-eslint/explicit-function-return-type": "error",

    // コメントを書けばts-ignoreも利用しても良い
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": "allow-with-description",
        "minimumDescriptionLength": 8
      }
    ],

    // undefinedやnullチェックで0や''を意図せずnull扱いしてしまわないように
    "@typescript-eslint/strict-boolean-expressions": [
      "error",
      {
        // nullableかどうかを正しく意識できないと事故るので、これらも禁止
        "allowString": false,
        "allowNumber": false
      }
    ],

    // できればnon-null-assertionは使いたくないが、業務のコードだと使わざるを得ないことも多そう…
    "@typescript-eslint/no-non-null-assertion": "warn",

    // 個人開発で最初からONにする分には良いが、途中から導入したり業務で導入すると混乱しそう
    "@typescript-eslint/consistent-type-imports": "error",

    ////// 個人開発だと要らないけど、業務だとあると役立ちそう枠
    "@typescript-eslint/require-array-sort-compare": "error",
    "@typescript-eslint/prefer-includes": "error",

    ////// なくてもそんなに困らないけど、入れといても良いか枠
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/prefer-return-this-type": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-confusing-void-expression": "error",

    // eslint-disable にはコメントを付けなければならない
    "eslint-comments/require-description": "error",

    // 大量のユーティリティ関数を持つオブジェクトを定義したいときのためにstaticメソッドのみ許可する
    "@typescript-eslint/unbound-method": ["error", {"ignoreStatic": true}]

    // 大量の型が存在してネストしたい場合にはoffにしたいかも
    // "@typescript-eslint/no-namespace": "off",

    ////// 以下は業務の場合はこれらのルールは厳しすぎるのでoffにしておく
    // anyをそのまま使えないようにするルール群
    // "@typescript-eslint/no-unsafe-assignment": "off",
    // "@typescript-eslint/no-unsafe-return": "off",
    // "@typescript-eslint/no-unsafe-call": "off",
    // "@typescript-eslint/no-unsafe-member-access": "off",

    // 型が分かっているが厳密なチェックを行う必要がない場合などに as any を使いたい
    // "@typescript-eslint/no-explicit-any": "off",
  }
}
